#!/bin/bash
#
# The Marionettist - A puppet installation tool
# author: kurt/yuweb <garnier.etienne@gmail.com>
#

# Internals options
# -----------------

SUPPORTED=( Debian )                  # Supported Linux distributions
PUPPET='puppet-2.6.8.tar.gz'          # Puppet version
FACTER='facter-1.5.8.tar.gz'          # Facter version
REPO='https://github.com/garnieretienne/marionettist/raw/develop' # HTTP repo for templates
LOG='/tmp/marionettist.log'           # Log file (regular command output are writted here)

# Template default variables declaration
# ------------------------------
declare -A templates
templates=(
  ["fqdn"]=$(hostname -f),             # full qualified domain name
  ["hostname"]=$(hostname),
)

# Options
# -------

# Print help
usage() 
{
cat << EOF
usage: $0 options

The Marionettist - A puppet installation tool

OPTIONS:
   -h         show this message
   -a server  install puppet agent
   -m         install puppet master
   -g key     [master] install a git repo

Distributions supported: ${SUPPORTED[*]}
EOF
}

# Default values
AGENT=false
MASTER=false
GIT=false
KEY=
KEYNAME=
SERVER=

# Get options
while getopts “ha:mg:” OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         a)
             AGENT=true
             SERVER=$OPTARG
             ;;
         m)
             MASTER=true
             ;;
         g)
             GIT=true
             KEY=$OPTARG
             ;;
         ?)
             usage
             exit
             ;;
         *)
             usage
             exit
             ;;
     esac
done

# Core functions
# --------------

# Test if the current distribution is supported
#   dist = $(lsb_release -si)
#   if is_supported? dist
#   then
#     echo "Your distribution is supported"
#   fi
is_supported?() {
  distro=$1
  for i in ${SUPPORTED[@]}
  do
    if [ $i == $distro ]
    then
      return 0
    fi
  done

  return 1
}

# Replace some |variables| by their content in a file
#   templates["var"]='foo'
#   template filename
template() {
  file=$1
  for word in "${!templates[@]}"
  do
    sed -i "s#|$word|#${templates[$word]}#" $file
  done
}

# Analyse key to extract it name
#   analyse_key keyfile 
analyse_key() {
  keyfile=$1
  if [[ -f $keyfile ]] # test if file exist 
  then
    if su git -c "cat $keyfile >> /dev/null 2>> /dev/null" # test if file is readable by git user
    then 
			key_name=`cat $keyfile | awk -F ' ' '{ print $3 }'`
			if [ ! "$key_name" == "" ] # test if file is in pubkey format (enc+key+name)
			then
				KEYNAME=$key_name
				return 0
			else
        echo "!! $keyfile is not a public key"
				return 1
			fi
    else
      echo "!! $keyfile can't be read by 'git' user"
      return 1
    fi
  else
    echo "!! $keyfile don't exist"
    return 1
  fi
}

# Init a git reposotiry on the server (/var/git/repositories)
#   init_repo repo_name
init_repo() {
  name=$1
  cd /var/git/repositories
  mkdir $name.git  >> $LOG 2>> $LOG
  cd $name.git
  git --bare init  >> $LOG 2>> $LOG
  chown -R git:git .
}

# Link a local git repository with a folder
#   link_repo repo_name, folder
link_repo() {
  repo=$1
  path=$2
  hook="/var/git/repositories/$repo.git/hooks/post-update"
  echo '#!/bin/sh' > $hook
  echo "~/bin/update_repo $path" >> $hook
  chmod 700 $hook  >> $LOG 2>> $LOG
  chown git:git $hook  >> $LOG 2>> $LOG
  cd $path/..  >> $LOG 2>> $LOG
  rm -rf $path  >> $LOG 2>> $LOG
  git clone /var/git/repositories/$repo.git  >> $LOG 2>> $LOG
}

# Step and install functions
# --------------------------

# Master and Agent installation:
# Check if the current user is root (needed)
general_step_check_root(){
  case $DISTRO in
    *)
      user=$(whoami)
      if [ $user != 'root' ] 
      then
        echo "!! current user ($user) is not root"
        exit 1
      fi
      ;;
  esac
}

# Master installation step:
# Install all needed dependencies
master_step_install_dependencies() {
  case $DISTRO in
    Debian)
      # install ruby stack
      apt-get --quiet --yes install ruby rubygems libopenssl-ruby >> $LOG 2>> $LOG
      # install latest nginx from dotdeb repo (best ssl client verify option)
      echo '>  install latest stable nginx (setup dotdeb repo)'
      echo "deb http://packages.dotdeb.org stable all" > /etc/apt/sources.list.d/dotdeb.list  >> $LOG 2>> $LOG
      echo "deb-src http://packages.dotdeb.org stable all" >> /etc/apt/sources.list.d/dotdeb.list  >> $LOG 2>> $LOG
      wget http://www.dotdeb.org/dotdeb.gpg  >> $LOG 2>> $LOG
      cat dotdeb.gpg | sudo apt-key add -  >> $LOG 2>> $LOG
      apt-get --quiet --yes update   >> $LOG 2>> $LOG
      apt-get --quiet --yes install nginx  >> $LOG 2>> $LOG
      # install thin (http server in ruby), better than Webrick (the default one)
      echo '>  install thin'
      gem install thin  >> $LOG 2>> $LOG
      ;;
    *)
      echo "!! your distribution ($DISTRO) has no declarations for 'master_step_install_dependencies()'"
      exit 1
      ;;
  esac
}

# Agent installation step:
# Install all needed dependencies
agent_step_install_dependencies() {
  case $DISTRO in
    Debian)
      # install ruby stack
      apt-get --quiet --yes install ruby rubygems libopenssl-ruby >> $LOG 2>> $LOG
      ;;
    *)
      echo "!! your distribution ($DISTRO) has no declarations for 'agent_step_install_dependencies()'"
      exit 1
      ;;
  esac
}

# General installation step:
# Download puppet sources
general_step_download_puppet_sources() {
  case $DISTRO in
    *)
      cd /tmp  >> $LOG 2>> $LOG
      # register the puppet labs master key
      echo '>  download master key (4BD6EC30)'
      gpg --keyserver pool.sks-keyservers.net --recv-key 4BD6EC30  >> $LOG 2>> $LOG
      # download puppet and facter (and their signs)
      echo '>  download facter'
      wget http://puppetlabs.com/downloads/facter/$FACTER  >> $LOG 2>> $LOG
      wget http://puppetlabs.com/downloads/facter/$FACTER.sign  >> $LOG 2>> $LOG
      echo '>  download puppet'
      wget http://puppetlabs.com/downloads/puppet/$PUPPET  >> $LOG 2>> $LOG
      wget http://puppetlabs.com/downloads/puppet/$PUPPET.asc  >> $LOG 2>> $LOG
      # check the downloaded files with respective signs
      echo '>  check files integrity' #TODO: stop if sign failed
      if ! gpg --verify $FACTER.sign $FACTER  >> $LOG 2>> $LOG; then echo "!! checksum for $FACTER failed"; exit 1; fi
      if ! gpg --verify $PUPPET.asc $PUPPET   >> $LOG 2>> $LOG; then echo "!! checksum for $PUPPET failed"; exit 1; fi
      ;;
  esac
}

# General installation step:
# Install facter
general_step_install_facter() {
  case $DISTRO in
    *)
      cd /tmp  >> $LOG 2>> $LOG
      echo '>  extract it'
      tar xzf $FACTER  >> $LOG 2>> $LOG
      echo '>  install it'
      cd /tmp/facter-*  >> $LOG 2>> $LOG
      ruby install.rb  >> $LOG 2>> $LOG
      ;;
  esac
}

# General installation step:
# Install puppet
general_step_install_puppet() {
  case $DISTRO in
    *)
      cd /tmp  >> $LOG 2>> $LOG
      echo '>  extract it'
      tar xzf $PUPPET  >> $LOG 2>> $LOG
      echo '>  create user and group puppet'
      useradd puppet  >> $LOG 2>> $LOG
      echo '>  install it'
      cd puppet-*  >> $LOG 2>> $LOG
      ruby install.rb  >> $LOG 2>> $LOG
      # ensure important directories exists
      mkdir -p /etc/puppet/manifests
      mkdir -p /var/lib/puppet/modules
      mkdir -p /var/lib/puppet/files
      ;;
  esac
}

# Master installation step:
# Finish puppet installation and configuration 
# (service scripts, configuration files, 
# nginx vhost, thin config files, etc...)
master_step_configure_puppet_master() {
  case $DISTRO in
    Debian)
      # grab the first site_ruby directory, used by install.rb
      site_ruby=$(ruby -e 'puts $:.first')
      # get a config.ru for thin
      wget --no-check-certificate $REPO/puppet_master/config.ru  >> $LOG 2>> $LOG
      mkdir $site_ruby/puppet/rack  >> $LOG 2>> $LOG
      mv config.ru $site_ruby/puppet/rack/config.ru  >> $LOG 2>> $LOG
      chown puppet:puppet $site_ruby/puppet/rack/config.ru  >> $LOG 2>> $LOG
      # generate a basic config file
      echo '>  generate config file'
      wget --no-check-certificate $REPO/puppet_master/puppet.conf  >> $LOG 2>> $LOG
      # set the fqdn as certname
      template puppet.conf
      mv puppet.conf /etc/puppet/puppet.conf  >> $LOG 2>> $LOG
      puppetmasterd --onetime  >> $LOG 2>> $LOG
      kill `cat /var/run/puppet/master.pid`  >> $LOG 2>> $LOG
      # generate the fileserver config file
      wget --no-check-certificate $REPO/puppet_master/fileserver.conf >> $LOG 2>> $LOG
      mv fileserver.conf /etc/puppet/fileserver.conf  >> $LOG 2>> $LOG
      # puppet need this folder and thin+config.ru won't start if it not created
      mkdir /var/lib/puppet/rrd >> $LOG 2>> $LOG
      chown puppet:puppet /var/lib/puppet/rrd  >> $LOG 2>> $LOG
      # register the init.d service script (master)
      echo '>  register puppet service'
      wget --no-check-certificate $REPO/puppet_master/init.d_master  >> $LOG 2>> $LOG
      mv init.d_master /etc/init.d/puppetmasterd  >> $LOG 2>> $LOG
      chmod +x /etc/init.d/puppetmasterd  >> $LOG 2>> $LOG
      update-rc.d puppetmasterd defaults  >> $LOG 2>> $LOG
      echo '>  configure puppet in nginx/thin'
      # set up the puppet vhost in nginx and enable it
      wget --no-check-certificate $REPO/puppet_master/vhost_puppet  >> $LOG 2>> $LOG
      template vhost_puppet
      mv vhost_puppet /etc/nginx/sites-available/puppet
      ln -s /etc/nginx/sites-available/puppet /etc/nginx/sites-enabled/puppet  >> $LOG 2>> $LOG
      service nginx reload  >> $LOG 2>> $LOG
      # register the init.d service script (agent)
      echo '>  configure puppet agent'
      wget --no-check-certificate $REPO/puppet_agent/init.d_agent  >> $LOG 2>> $LOG
      mv init.d_agent /etc/init.d/puppetd  >> $LOG 2>> $LOG
      chmod +x /etc/init.d/puppetd  >> $LOG 2>> $LOG
      update-rc.d puppetd defaults  >> $LOG 2>> $LOG
      ;;
    *)
      echo "!! your distribution ($DISTRO) has no declarations for 'master_step_configure_puppet_master()'"
      exit 1
      ;;
  esac
}

# Agent installation step:
# Finish puppet installation and configuration 
# (service scripts, configuration files, etc...)
agent_step_configure_puppet_agent() {
    case $DISTRO in
    Debian)
      # generate a basic config file
      echo '>  generate config file'
      templates["puppet_master"]=$SERVER
      wget --no-check-certificate $REPO/puppet_agent/puppet.conf  >> $LOG 2>> $LOG
      template puppet.conf
      mv puppet.conf /etc/puppet/puppet.conf  >> $LOG 2>> $LOG
      # register the init.d service script (agent)
      echo '>  register puppet service'
      wget --no-check-certificate $REPO/puppet_agent/init.d_agent  >> $LOG 2>> $LOG
      mv init.d_agent /etc/init.d/puppetd  >> $LOG 2>> $LOG
      chmod +x /etc/init.d/puppetd  >> $LOG 2>> $LOG
      update-rc.d puppetd defaults  >> $LOG 2>> $LOG
      ;;
    *)
      echo "!! your distribution ($DISTRO) has no declarations for 'agent_step_configure_puppet_agent()'"
      exit 1
      ;;
  esac
}

# General installation step:
# Clean install folders
general_step_clean_folders() {
  case $DISTRO in
    *)
      cd /tmp  >> $LOG 2>> $LOG
      rm -rf /tmp/facter-*  >> $LOG 2>> $LOG
      rm -rf /tmp/puppet-*  >> $LOG 2>> $LOG
      ;;
  esac
}

# Master installation step:
# Start the services (nginx, puppet master 
# with thin, puppet agent)
master_step_start_services() {
  case $DISTRO in
    Debian)
      echo '>  start master'
      service nginx start  >> $LOG 2>> $LOG
      service puppetmasterd start  >> $LOG 2>> $LOG
      sleep 5
      echo '>  start master agent'
      service puppetd start  >> $LOG 2>> $LOG
      ;;
    *)
      echo "!! your distribution ($DISTRO) has no declarations for 'master_step_start_services()'"
      exit 1
      ;;
  esac
}

# Agent installation step:
# Start the services (puppet agent)
agent_step_start_services() {
    case $DISTRO in
    Debian)
      echo '>  start master agent'
      service puppetd start  >> $LOG 2>> $LOG
      ;;
    *)
      echo "!! your distribution ($DISTRO) has no declarations for 'agent_step_start_services()'"
      exit 1
      ;;
  esac
}

# Master installation step
# Install a Git repository to manage the modules and manifests
master_step_install_git_repo() {
  case $DISTRO in
    Debian)
      echo '>  install git server (gitosis)'
      apt-get -y install gitosis  >> $LOG 2>> $LOG
      echo '>  clean the installation'
      userdel gitosis  >> $LOG 2>> $LOG
      rm -rf /srv/gitosis  >> $LOG 2>> $LOG
      echo '>  create git user and dir (git, /var/git)'
      useradd -d /var/git -s /bin/bash git  >> $LOG 2>> $LOG
      mkdir /var/git  >> $LOG 2>> $LOG
      chown git:git /var/git  >> $LOG 2>> $LOG
      echo ">  verify public key ($KEY)"
      if ! analyse_key $KEY; then echo "!! error in keyfile"; exit; fi
      templates["admin"]="$KEYNAME"
      echo ">  init gitosis with the ssh key ($KEYNAME)"
      chown git:git $LOG # now, git can log in logfile
      su git -c "gitosis-init < $KEY  >> $LOG 2>> $LOG"
      chown root:root $LOG # now, root only can log in logfile
      echo '>  get update_repo script'
      cd /tmp
      #wget http://ge.tt/5cZ5k4h/update_repo?type=download  >> $LOG 2>> $LOG # TODO: wget github
      #mv update_repo?type=download update_repo
      wget --no-check-certificate $REPO/puppet_master/update_repo >> $LOG 2>> $LOG
      chmod 700 update_repo  >> $LOG 2>> $LOG
      chown git:git update_repo  >> $LOG 2>> $LOG
      mkdir /var/git/bin  >> $LOG 2>> $LOG
      mv /tmp/update_repo /var/git/bin/  >> $LOG 2>> $LOG
      echo '>  init modules repository'
      init_repo modules
      link_repo modules '/var/lib/puppet/modules'
      echo '>  init files repository'
      init_repo files
      echo '>  init manifests repository'
      init_repo manifests
      echo '>  configure repositories in git (modules, manifests, files)'
      cd /tmp
      #wget http://ge.tt/43uIjZ4/gitosis.conf?type=download  >> $LOG 2>> $LOG # TODO: wget github
      #mv gitosis.conf?type=download gitosis.conf
      wget --no-check-certificate $REPO/puppet_master/gitosis.conf >> $LOG 2>> $LOG
      template gitosis.conf
      git clone /var/git/repositories/gitosis-admin.git  >> $LOG 2>> $LOG
      mv gitosis.conf gitosis-admin/gitosis.conf  >> $LOG 2>> $LOG
      cd gitosis-admin  >> $LOG 2>> $LOG
      git add gitosis.conf  >> $LOG 2>> $LOG
      git config --global user.name "Puppet master install script ($KEYNAME)"  >> $LOG 2>> $LOG
      git config --global user.email nil@nomail.tld  >> $LOG 2>> $LOG
      git commit -m 'Create puppets repos'  >> $LOG 2>> $LOG
      git push  >> $LOG 2>> $LOG
      echo '>  link repositories with puppet dirs'
      #TODO
      ;;
    *)
      echo "!! your distribution ($DISTRO) has no declarations for 'master_step_install_git_repo()'"
      exit 1
      ;;
  esac
}

# Download, install, configure and start 
# a puppet master and a puppet agent on the server
install_puppet_master() {
  echo ">> install a puppet master node"
  general_step_check_root
  echo ">> output and errors available to $LOG"
  echo '>> install dependencies'
  master_step_install_dependencies
  echo '>> download puppet sources'
  general_step_download_puppet_sources
  echo ">> install facter ($FACTER)"
  general_step_install_facter
  echo ">> install puppet ($PUPPET)"
  general_step_install_puppet
  master_step_configure_puppet_master
  if $GIT
  then
    echo ">> install a git repo"
    master_step_install_git_repo
  fi
  echo '>> clean folders'
  general_step_clean_folders
  echo '>> start puppet'
  master_step_start_services
}

# Download, install, configure and start 
# a puppet agent on the host
install_puppet_agent() {
  echo ">> install a puppet agent node"
  general_step_check_root
  echo ">> output and errors available to $LOG"
  echo '>> install dependencies'
  agent_step_install_dependencies
  echo '>> download puppet sources'
  general_step_download_puppet_sources
  echo ">> install facter ($FACTER)"
  general_step_install_facter
  echo ">> install puppet ($PUPPET)"
  general_step_install_puppet
  agent_step_configure_puppet_agent
  echo '>> clean folders'
  general_step_clean_folders
  echo '>> start puppet'
  agent_step_start_services
}

# Controller
# ----------

if $AGENT && $MASTER # means the user has selected to install both a master and an agent
then
  echo "!! you can't install an puppet agent and puppet master,"
  echo "!! just install puppet master (-m) will install both."
  exit
elif ! $MASTER && $GIT # means the user want to install a git server without installing a master
then
  echo "!! you can't install a git server and init a repo without installing a master on the node"
  exit
elif ! $AGENT && ! $MASTER # means the user has selected nothing
then
  usage
  exit
elif ! $AGENT && $MASTER # means the user want to install a master
then
  DISTRO=$(lsb_release -si)
  if is_supported? $DISTRO 
  then
    install_puppet_master
  else
    echo "!! your distribution ($DISTRO) is not supported"
  fi
elif $AGENT && ! $MASTER # means the user want to install an agent
then
  DISTRO=$(lsb_release -si)
  if is_supported? $DISTRO
  then
    install_puppet_agent
  else
    echo "!! your distribution ($DISTRO) is not supported"
  fi
fi
